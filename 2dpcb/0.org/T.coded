/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2306                                  |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    arch        "LSB;label=32;scalar=64";
    class       volScalarField;
    location    "0";
    object      T;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 1 0 0 0];

internalField   uniform 300;

boundaryField
{
    bottom
    {
        type            zeroGradient;
        /*
        type            codedMixed;
        valueFraction   uniform 1;
        refValue        uniform 0;
        refGradient     uniform 0;
        value           uniform 300; // 初期値

        name    codedPatchBC;   // name of generated BC

        code
        #{
            const scalar T_inf = 300;
            const scalar h = 10;
            const scalar k = 0.025; // 熱伝導率

            scalarField& Tp = *this;
            const fvPatch& patch = this->patch();
            const fvMesh& mesh = patch.boundaryMesh().mesh();
            const fvPatchField<scalar>& Tpatch = patch.lookupPatchField<volScalarField, scalar>("T");
            const vectorField& Cf = patch.Cf(); // 面の中心
            const vectorField& Cn = mesh.C().boundaryField()[patch.index()];// 隣接セルの中心

            forAll(Tp, faceI)
            {
                scalar delta = mag(Cf[faceI] - Cn[faceI]); // 中心間距離
                if(delta > 1.0e-6){
                    Tp[faceI] = (h * T_inf + k * Tpatch[faceI] / delta) / (h + k / delta);
                } else {
                    Tp[faceI] = (h * T_inf + k * Tpatch[faceI] / 1.0e-6) / (h + k / 1.0e-6);
                }
            }
        #};
        */
    }
    left
    {
        type            zeroGradient;
    }
    right
    {
        type            zeroGradient;
    }
    leftTop
    {
        type            zeroGradient;
    }
    rightTop
    {
        type            zeroGradient;
    }
    top
    {
        //type            fixedValue;
        //value           uniform 300;
        type            mixed;
        refValue        uniform 300; // 無限遠の温度
        refGradient     uniform 0;     // 境界上の温度勾配の参照値
        valueFraction   uniform 0.0004;//10 / (10+0.025/0.001);// h / (h + k / delta); // 値の重み付け
        value           uniform 30; // 境界上の初期温度（任意）
    }
    frontAndBack
    {
        type            empty;
    }
}


// ************************************************************************* //
